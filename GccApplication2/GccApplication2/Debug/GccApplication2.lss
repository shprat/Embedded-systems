
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cc  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037a  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000015ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  88:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <D_B>:

char c;

void D_B()
{
	c = 'y';
  90:	89 e7       	ldi	r24, 0x79	; 121
  92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	// taking max brightness from potentiometer( set start conversion bit)
	ADCSRA |= (1<<ADSC); // enabling ADSC
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	80 83       	st	Z, r24
	OCR1A += 10; // increasing brightness
  a0:	e8 e8       	ldi	r30, 0x88	; 136
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	91 81       	ldd	r25, Z+1	; 0x01
  a8:	0a 96       	adiw	r24, 0x0a	; 10
  aa:	91 83       	std	Z+1, r25	; 0x01
  ac:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	80 e7       	ldi	r24, 0x70	; 112
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <D_B+0x24>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <D_B+0x2e>
  be:	00 00       	nop
	_delay_ms(50);
	
	// if max, make led brightness low again
	if(OCR1A >= ADC*64)
  c0:	20 81       	ld	r18, Z
  c2:	31 81       	ldd	r19, Z+1	; 0x01
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	00 24       	eor	r0, r0
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	07 94       	ror	r0
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
  d8:	07 94       	ror	r0
  da:	98 2f       	mov	r25, r24
  dc:	80 2d       	mov	r24, r0
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	38 f0       	brcs	.+14     	; 0xf2 <D_B+0x62>
	{
		OCR1A = 0xf;// decreasing again to maintain flow
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sei();  // enabling input so new input can be taken
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <B_D>:
	}
}
void B_D()
{
	c = 'n';
  f4:	8e e6       	ldi	r24, 0x6E	; 110
  f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADCSRA |= (1<<ADSC); //enabling ADSC
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 64       	ori	r24, 0x40	; 64
 102:	80 83       	st	Z, r24
	OCR1A = ADC * 64; // setting value for comparison
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10c:	00 24       	eor	r0, r0
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	07 94       	ror	r0
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	07 94       	ror	r0
 11a:	98 2f       	mov	r25, r24
 11c:	80 2d       	mov	r24, r0
 11e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	while(1)
	{
		OCR1A -= 10;
 126:	e8 e8       	ldi	r30, 0x88	; 136
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	91 81       	ldd	r25, Z+1	; 0x01
 12e:	0a 97       	sbiw	r24, 0x0a	; 10
 130:	91 83       	std	Z+1, r25	; 0x01
 132:	80 83       	st	Z, r24
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	80 e7       	ldi	r24, 0x70	; 112
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <B_D+0x46>
 142:	00 c0       	rjmp	.+0      	; 0x144 <B_D+0x50>
 144:	00 00       	nop
		_delay_ms(50);
		ADCSRA |= 1 << ADSC;
 146:	aa e7       	ldi	r26, 0x7A	; 122
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	8c 91       	ld	r24, X
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8c 93       	st	X, r24
		// if low, make led brightness high again
		if(OCR1A <= 0xf)
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	40 97       	sbiw	r24, 0x10	; 16
 156:	38 f7       	brcc	.-50     	; 0x126 <B_D+0x32>
		{
			OCR1A = ADC * 64;
 158:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 15c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 160:	00 24       	eor	r0, r0
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	07 94       	ror	r0
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	07 94       	ror	r0
 16e:	98 2f       	mov	r25, r24
 170:	80 2d       	mov	r24, r0
 172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			sei(); // enabling interrupt so new input can be taken
 17a:	78 94       	sei
 17c:	d4 cf       	rjmp	.-88     	; 0x126 <B_D+0x32>

0000017e <main>:
	}
}

int main(void)
{
	DDRB = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 b9       	out	0x04, r24	; 4

	TCNT1 = 0;  // Set timer initially to 0
 182:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 186:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

	
	// Setting up external interrupt
	EIMSK  = 0b000000001;	// Enable external interrupt (INT0)
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	8d bb       	out	0x1d, r24	; 29
	EICRA  = 0b000000001;	// Trigger on rising edge
 18e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	DDRD   &= (0 << 2); // setting INT0 to input
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	1a b8       	out	0x0a, r1	; 10
	sei(); // enabling interrupt
 196:	78 94       	sei
	
	// Working for potentiometer control(ADC)
	ADCSRA = 0b10000111;	// Enable Analog Digital Converter, set prescaler to 128
 198:	87 e8       	ldi	r24, 0x87	; 135
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0b00000000;	// Free Running mode
 19e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	ADMUX  = 0b00000000;	// Select ADC0 as input, AREF pin to be V_Ref
 1a2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	DDRC = 0x00; // setting port D as input for potentiometer
 1a6:	17 b8       	out	0x07, r1	; 7
	
		
	TCCR1A = (1<<COM1A1) | (0<<COM1A0) | (1<<WGM11) | (1<<WGM10); // for timer comparison and fast pwm
 1a8:	83 e8       	ldi	r24, 0x83	; 131
 1aa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (0 << WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS10); // for FAst PWM mode and prescaler
 1ae:	89 e0       	ldi	r24, 0x09	; 9
 1b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	


	ICR1 = 0x3FF; // input capture register , measure length of pulse
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	93 e0       	ldi	r25, 0x03	; 3
 1b8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1bc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 0xf;  // for pin D9(OC1A) output compare register
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	// making brightness high and low in a loop
	while(1)
	{
		// taking max brightness from potentiometer( set start conversion bit)
		ADCSRA |= (1<<ADSC);
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	80 83       	st	Z, r24
		OCR1A += 10; // increasing brightness
 1d6:	e8 e8       	ldi	r30, 0x88	; 136
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	91 81       	ldd	r25, Z+1	; 0x01
 1de:	0a 96       	adiw	r24, 0x0a	; 10
 1e0:	91 83       	std	Z+1, r25	; 0x01
 1e2:	80 83       	st	Z, r24
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	80 e7       	ldi	r24, 0x70	; 112
 1e8:	92 e0       	ldi	r25, 0x02	; 2
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x6c>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x76>
 1f4:	00 00       	nop
		_delay_ms(50);
		
		// if max, make led brightness low again
		if(OCR1A >= ADC*64)
 1f6:	20 81       	ld	r18, Z
 1f8:	31 81       	ldd	r19, Z+1	; 0x01
 1fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 202:	00 24       	eor	r0, r0
 204:	96 95       	lsr	r25
 206:	87 95       	ror	r24
 208:	07 94       	ror	r0
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	07 94       	ror	r0
 210:	98 2f       	mov	r25, r24
 212:	80 2d       	mov	r24, r0
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	c8 f2       	brcs	.-78     	; 0x1cc <main+0x4e>
		{
			OCR1A = 0xf;// decreasing again to maintain flow
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 222:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 226:	d2 cf       	rjmp	.-92     	; 0x1cc <main+0x4e>

00000228 <__vector_1>:
	
}

// external interrupt
ISR(INT0_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
	while(1)
	{
		//To alter brightness with ADC
		ADCSRA = 0b10000111;	// Enable Analog Digital Converter, set prescaler to 128
 232:	87 e8       	ldi	r24, 0x87	; 135
 234:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
		ADCSRB = 0b00000000;	// Free Running mode
 238:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
		ADMUX  = 0b00000000;	// Select ADC0 as input, AREF pin to be V_Ref
 23c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		DDRC = 0x00; // setting port D as input for potentiometer
 240:	17 b8       	out	0x07, r1	; 7
		
		
		if(c == 'y') // checking if the method for dark - bright is on
 242:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 246:	89 37       	cpi	r24, 0x79	; 121
 248:	11 f4       	brne	.+4      	; 0x24e <__vector_1+0x26>
		{
			B_D(); // calling bright - dark function
 24a:	0e 94 7a 00 	call	0xf4	; 0xf4 <B_D>
			cli(); // disable interrupt so new input can be taken
		}
		
		else // checking if bright - dark
		{
			D_B(); // calling dark - bright function
 24e:	0e 94 48 00 	call	0x90	; 0x90 <D_B>
			cli();// disable interrupt so new input can be taken
 252:	f8 94       	cli
 254:	ee cf       	rjmp	.-36     	; 0x232 <__vector_1+0xa>

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
